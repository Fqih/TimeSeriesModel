# -*- coding: utf-8 -*-
"""Model ML Dengan Data Time Series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Br99IqSI7SLD18atzEfmd3AoYWGUvVvi

# **Proyek Kedua : Membuat Model Machine Learning dengan Data Time**

*   Dataset yang akan dipakai bebas, namun minimal memiliki 1000 sampel.

*   Harus menggunakan LSTM dalam arsitektur model.

*  Validation set sebesar 20% dari total dataset.

*  Model harus menggunakan model sequential.

*  Harus menggunakan Learning Rate pada Optimizer.

*  MAE < 10% skala data.

Data Diri:




> Nama : Muhammad Faqih Hakim

Import Library Yang dibutuhkan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

"""Dataset yang akan dipakai bebas, namun minimal memiliki 1000 sampel.

Link Dataset : https://www.kaggle.com/datasets/shenba/time-series-datasets
"""

df = pd.read_csv('dataset.csv')
df

"""Karena Terdapat Beberapa data yang tidak bisa diolah maka kita bersihkan dulu data datanya"""

df['Daily minimum temperatures'].unique()

"""kita ubah data nya menjadi numeric dan Untuk data Yang tidak bisa diubah ke Numeric ubah menjadi nan"""

df['Daily minimum temperatures'] = pd.to_numeric(df['Daily minimum temperatures'], errors='coerce')
df.isna().sum()

"""drop nan"""

df = df.dropna()
df.info()

df.isna().sum()

date = df['Date'].values
mintemp = df['Daily minimum temperatures'].values

"""Buat Plot untuk melihat sifat Data"""

plt.figure(figsize=(15,5))
plt.plot(date, mintemp)
plt.xlabel('Date')
plt.ylabel('Daily minimum temperatures')
plt.title('Daily minimum temperatures')
plt.show()

"""dapat dilihat disini menunjukkan bahwa data ini merupakan time series yang sifatnya musiman.

Buat fungsi untuk Windowing data
"""

def windowed_dataset(series, size, batch, shuffle):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(size + 1))
    ds = ds.shuffle(shuffle)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch).prefetch(1)

"""Implementasi Callback dimana train model akan dihentikan saat MAE sudah terpenuhi


"""

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if logs.get('mae') < 2.3:
            print("\nMAE telah Lebih kecil dari 10% data")
            self.model.stop_training = True
callbacks = myCallback()

"""Validation set sebesar 20% dari total dataset."""

date = df['Date'].values
temp = df['Daily minimum temperatures'].values

date_train, date_val, temp_train, temp_val = train_test_split(date, temp, test_size=0.2, shuffle=False)

train_set = windowed_dataset(temp_train, 30, 100, 1000)
val_set = windowed_dataset(temp_val, 30, 100, 1000)

"""Harus menggunakan LSTM dalam arsitektur model dan menggunakan model sequential."""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dense(16, activation="relu"),
  tf.keras.layers.Dense(1),
])

"""Harus menggunakan Learning Rate pada Optimizer."""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

"""periksa Ambang batas MAE"""

batas_mae = (df['Daily minimum temperatures'].max() - df['Daily minimum temperatures'].min()) * 10/100
print(batas_mae)

"""Latih Model"""

history = model.fit(train_set,
                    epochs=100,
                    callbacks=[callbacks],
                    validation_data=val_set)

"""terlihat bahwa batas MAE terpenuhi (2.63>2.2553)"""

plt.plot(history.history['mae'], label='Train MAE')
plt.plot(history.history['val_mae'], label='Val MAE')
plt.title('Model MAE')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend()